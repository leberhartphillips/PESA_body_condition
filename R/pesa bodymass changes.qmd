---
title: "Body mass dynamics of male pectoral sandpipers during the breeding season"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format: 
  html:
    toc: true
    code-fold: true
    code-tools: true
    self-contained: true
execute:
  warning: false
editor_options: 
  chunk_output_type: console
---

```{r, settings_data, echo=FALSE}
# source(here::here("R/DAT/wrangle_datasets.R"))
# source(here::here("R/project/project_plotting.R"))
load("/Users/luketheduke2/Documents/Academic/Postdoc_Bart/projects/PESA_body_condition/R/DAT/pat.rds")
load("/Users/luketheduke2/Documents/Academic/Postdoc_Bart/projects/PESA_body_condition/R/DAT/cap_05_09.rds")
```

```{r, libraries, echo=FALSE, results='hide'}
## install dependent packages

# a vector of all the packages needed in the project's scripts
packages_required_in_project <- 
  c("data.table",
    "dbo",
    "glue",
    "here",
    "lubridate",
    "stringr",
    "tidyverse",
    "vtable",
    "corrplot",
    "lme4",
    "car",
    "broom.mixed",
    "rptR",
    "partR2",
    "effects",
    "gt",
    "RColorBrewer",
    "patchwork",
    "multcomp"
  )

# of the required packages, check if some need to be installed
new.packages <- 
  packages_required_in_project[!(packages_required_in_project %in% 
                                   installed.packages()[,"Package"])]

# install all packages that are not locally available
if(length(new.packages)) install.packages(new.packages)

# load all the packages into the current R session
lapply(packages_required_in_project, require, character.only = TRUE)
```

```{r, plotting misc, echo=FALSE, results='hide'}
luke_theme <- 
  theme_bw() +
  theme(
    text = element_text(family = "Franklin Gothic Book"),
    legend.title = element_text(size = 16),
    legend.text = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.text.x  = element_text(size = 10), 
    axis.title.y = element_text(size = 12),
    axis.text.y = element_text(size = 10),
    strip.text = element_text(size = 12),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.ticks = element_line(size = 0.5, colour = "grey40"),
    panel.border = element_rect(linetype = "solid", colour = "grey"),
    legend.position = c(0.1, 0.9)
  )

col_all <- "#2E3440"
```

## Standardize captures by year

Despite the short season, early arriving males likely face different conditions that later arriving males that may impact body mass dynamics during their tenure at Barrow. For example, early arriving males may face different levels of intra-sexual competition, food availability, or ambient climate-conditions than later arriving males which would influence metabolic demands, and hence shifts in repeated measures of body mass. To standardize measurements to the year-specific phenology of males, we first extract the first captures of all males in years 2005 to 2009 from the PESAatBARROW.CAPTURES database (i.e., even those that were captured only once). Then, for each capture, we calculate the time since midnight on January 1 of a capture's given year to acquire a Julian-esque timestamp.

```{r}
# take all captures (i.e., regardless of if they were captured twice)
cap_05_09_phenology <-
  cap_05_09 %>% 
  mutate(capture_id = paste(ID, year_, sep = "_")) %>% 
  filter(!is.na(gpsdt)) %>% 
  mutate(gpsdt = as.POSIXct(gpsdt, origin = "1970-01-01")) %>% 
  mutate(gpsdt_year_start = ymd_hms(paste0(year(gpsdt), "-01-01 00:00:00"))) %>% 
  mutate(gpsdt_since_year_start = as.numeric(gpsdt - gpsdt_year_start)) %>% 
  group_by(ID) %>% 
  arrange(ID, gpsdt) %>% 
  slice(1) %>% 
  arrange(year_) %>% 
  group_by(year_) %>% 
  summarize(mean_date = mean(gpsdt_since_year_start),
            sd_date = sd(gpsdt_since_year_start))

cap_05_09 %>% 
  mutate(capture_id = paste(ID, year_, sep = "_")) %>% 
  filter(!is.na(gpsdt)) %>% 
  mutate(gpsdt = as.POSIXct(gpsdt, origin = "1970-01-01")) %>% 
  mutate(gpsdt_year_start = ymd_hms(paste0(year(gpsdt), "-01-01 00:00:00"))) %>% 
  mutate(gpsdt_since_year_start = as.numeric(gpsdt - gpsdt_year_start)) %>% 
  group_by(ID) %>% 
  arrange(ID, gpsdt) %>% 
  slice(1) %>% 
  arrange(year_) %>% 
  ggplot(aes(x = gpsdt_since_year_start)) + 
  geom_histogram() +
  facet_grid(year_ ~ .) +
  xlab("Julian timestamp of first capture") +
  ylab(expression(italic(N)[males]))
```

Then we standardize capture dates by the mean capture date for each year
```{r}
cap_05_09 %>% 
  # filter(n_by_id > 1, !is.na(weight)) %>% 
  mutate(capture_id = paste(ID, year_, sep = "_")) %>% 
  dplyr::select(-capdt, -ID) %>% 
  mutate(gpsdt_year_start = ymd_hms(paste0(year(gpsdt), "-01-01 00:00:00"))) %>% 
  mutate(gpsdt_since_year_start = as.numeric(gpsdt - gpsdt_year_start)) %>% 
  left_join(cap_05_09_phenology, by = "year_") %>%
  mutate(gpsdt_std = gpsdt_since_year_start - mean_date) %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ggplot(aes(x = gpsdt_std)) + 
  geom_histogram() +
  facet_grid(year_ ~ .) +
  xlab("standardized date of first capture") +
  ylab(expression(italic(N)[males]))

# standardize capture date according to the year
cap_05_09_std <- 
  cap_05_09 %>% 
  filter(n_by_id > 1, !is.na(weight)) %>%
  # filter(!is.na(weight)) %>% 
  mutate(capture_id = paste(ID, year_, sep = "_")) %>% 
  dplyr::select(-capdt, -ID) %>% 
  mutate(gpsdt_year_start = ymd_hms(paste0(year(gpsdt), "-01-01 00:00:00"))) %>% 
  mutate(gpsdt_since_year_start = as.numeric(gpsdt - gpsdt_year_start)) %>% 
  left_join(cap_05_09_phenology, by = "year_") %>%
  mutate(gpsdt_std = gpsdt_since_year_start - mean_date) %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt_since_year_start) %>% 
  mutate(date_deviance = gpsdt_std - gpsdt_std[which.min(gpsdt_std)],
         first_date = gpsdt_std[which.min(gpsdt_std)],
         last_date = gpsdt_std[which.max(gpsdt_std)]) %>% 
  dplyr::select(year_, capture_id, gpsdt, gpsdt_std, date_deviance, first_date, 
                last_date, weight, culmen, totalHead, tarsus,  wing, n_by_id)
```

## Evaluate static morphometric measures of body structure with a PCA

Body mass changes may differ according to the structural size of an individual and so in our model we will need to control for structural size. In the PESAatBARROW.CAPTURES database we have 4 structural size measures collected for each individual: culmen, totalHead, tarsus, and wing. Here we run a Principle Component Analysis of these 4 measures to assess their collinearity, then we evaluate how each measure correlates with body mass compared to PC1 of the PCA. The results of the PCA show that PC1 captures \~77% of the variance in the 4 measures, however when we compare the correlations of PC1 with weight vs. wing with weight, we can see that we do not gain much more of inference with PC1. Thus we proceed with using wing as our structural size control as it is more parsimonious.

```{r}
# similar approach to Peig and Green (2010), Appendix 3 (https://besjournals.onlinelibrary.wiley.com/action/downloadSupplement?doi=10.1111%2Fj.1365-2435.2010.01751.x&file=FEC_1751_sm_AppendixS3.pdf)
# PCA of static body structural measurements (culmen, totalHead, tarsus, wing)
static_measures_pca <-
  cap_05_09_std %>% 
  group_by(capture_id) %>% 
  arrange(gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>%
  dplyr::select(culmen, totalHead, tarsus, wing) %>%
  princomp()

# check the PCA results
summary(static_measures_pca)
biplot(static_measures_pca, cex = 0.7)

# bind PC1 to the original dataframe
cap_05_09_std_pca <- 
  cap_05_09_std %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  dplyr::select(capture_id, culmen, totalHead, tarsus,  wing) %>%
  bind_cols(., static_measures_pca$scores[, 1]) %>% 
  rename(structure_pc1 = `...6`) %>% 
  left_join(cap_05_09_std %>% 
              dplyr::select(-c(culmen, totalHead, tarsus,  wing)), ., 
            by = "capture_id", multiple = "all") %>% 
  na.omit() %>% 
  mutate(year_ = factor(year_, levels = c(2005, 2006, 2007, 2008, 2009))) %>% 
  mutate(log_weight = log(weight),
         log_wing = log(wing))

# ggplot(cap_05_09_std_pca, 
#        aes(x = structure_pc1, y = weight)) + 
#   geom_point() + 
#   labs(x = "PC1", y = "Body Mass") + 
#   theme_minimal()
# 
# ggplot(cap_05_09_std_pca, 
#        aes(x = wing, y = weight)) + 
#   geom_point() + 
#   labs(x = "wing length", y = "Body Mass") + 
#   theme_minimal()

# check 
cap_05_09_std_pca %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  mutate(log_weight = log(weight),
         log_culmen = log(culmen),
         log_totalHead = log(totalHead),
         log_tarsus = log(tarsus),
         log_wing = log(wing)) %>%
  dplyr::select(log_weight, log_culmen, log_totalHead, log_tarsus, log_wing, structure_pc1) %>% 
  cor() %>% 
  corrplot(type = "upper", method = "number", tl.srt = 45)
```

## Assess isometric relationship between weight and wing

```{r}
cap_all %>% 
  group_by(ID, year_) %>% 
  arrange(gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  mutate(log_weight = log(weight),
         log_culmen = log(culmen),
         log_totalHead = log(totalHead),
         log_tarsus = log(tarsus),
         log_wing = log(wing)) %>% 
  select(log_weight, log_culmen, log_totalHead, log_tarsus, log_wing) %>% 
  na.omit() %>% 
  cor() %>% 
  corrplot(type = "upper", method = "number", tl.srt = 45)
```


## Within-individual centering: Disentagling within- vs. between individual changes in body mass over time

When assessing how population values of body mass change over time or differ between individuals, it is important to acknowledge that both within- and between-individual processes might be underlying causal mechanisms (van de Pol & Verhulst, 2006). We therefore need to decompose the within- vs. between-individual components of body mass change in the male PESA population. Population-level correlations might result from seasonal variation in the arrival (or departure) of males of differing body mass. This is known as 'selective appearance' (or 'selective disappearance', in the case of last measures). In our study of PESA body mass, one could hypothesize that there is selective appearance of large males: heavier males arrive earlier than lighter males, due to faster spring migration, etc. Moreover, one could also hypothesize that there is selective disappearance of light males: lighter males may depart Barrrow sooner than heavy males due to their disadvantaged local intra-sexual competitive abilities. These effects result in correlations between tenure and body mass in our cross-sectional analysis of body mass, without reflecting within-individual changes. Within-individual changes in body mass can be caused by factors intrinsic to the individual, such as physical state, reproductive tactics, or by extrinsic factors, such as changes in the availability of food or fertile females on the study site. Within- and between-individual changes are not mutually exclusive: they may go in the same direction (Fig. 1A), or they may go in opposite directions with the between-individual effect masking within-individual patterns of an increase (Fig. 1B) or a decline (Fig. 1C) in body mass.

```{r fig.cap="Figure 1. Schematic showing a hypothetical population of three individuals (faint lines) of different body mass dynamics, compared to ordinary regression lines fitted through all individuals (bold-dashed lines).A few possible scenarios shown here are (A) within-individual increase in body mass and selective appearance of heavy individuals over the season, (B) within-individual increase in body mass and selective disappearance of heavy individuals over the season, and (C) within-individual decline in body mass and selective disappearance of lighter males over the season (C). Modified from van de Pol & Verhulst, 2006, American Naturalist 167:766-773."}
knitr::include_graphics("products/figures/van_de_Pol_&_Verhulst_2006_fig1.png")
```

To control for selective appearance and disappearance of males differing in body mass we fit our mixed-effects model with 'date first measured' and 'date last measured' as fixed effects -- a method that estimates between-individual seasonal effects introduced by selective disappearance and appearance. The raw distributions of 'date first measured' and 'date last measured' are shown here:

```{r}
first_d_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = first_date, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = first_date, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(first_date), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.3),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("standardized date of first measure") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")
first_d_dist_plot

last_d_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(n()) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = last_date, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = last_date, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(last_date), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.3),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("standardized date of last measure") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")

last_d_dist_plot
```

We model within-individual temporal changes in body mass by fitting a within-individual deviation score for date (henceforth 'date-deviance'), calculated for individual $i$ at age $j$ as: $date_{ij} - {Date FirstMeasured}_i$ (van de Pol & Verhulst, 2006a; Snijders & Bosker, 2011) -- essentially describing the amount of time since the bird's first encounter in the population (assumed to be a good proxy for the amount of time in Barrow since arrival).

```{r}
cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(2) %>% 
  ungroup() %>% 
  ggplot() + 
  geom_boxplot(aes(x = date_deviance, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = date_deviance, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(date_deviance), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.3),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("time lag between first and second measures (days)") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")
```

## Mixed effects model

Our model evaluates repeated measures of body mass ($r_{ij}$) taken from individual $i$ at time $j$. The random intercept term $u_{0i}$ and the residual error term $e_{0ij}$ are assumed to be drawn from a Gaussian distribution with mean 0 and variance $\sigma^2_u$ and $\sigma^2_e$, respectively. Our model specifically tests for within-individual change ($\beta_W \times DateDeviance_{ij}$) in the presence of a selective appearance effect ($\beta_A \times FirstDate_i$) and a selective disappearance effect ($\beta_D \times LastDate_i$). Thus the effect of date on first measure ($\beta_A$) estimates the additional effect to selective appearance given the estimated within-individual change in body mass with time. Wing is included in our model to control for the structural size of individuals and year was included as a fixed effect to control for annual variation (i.e., as we do not have repeated measures of individuals among years, we can not include year as a random effect). Individual identity was included as a random effect.

```{r}
mod_weight <-
  lmer(weight ~ wing + date_deviance + first_date + last_date + year_ +
         (1 | capture_id),
       data = cap_05_09_std_pca)
```

To evaluate uncertainty in our parameter estimates we simulated 1000 parametric bootstraps via "broom.mixed::tidy" and the "partR2::partR2" function (Stoffel et al., 2020). Likewise we derived individual-level repeatabilities (i.e., intra-class correlation) by simulating 1000 parametric bootstraps of the mixed-effect model using "rptR::rpt". We report fixed effects as standardized regression coefficients (i.e., beta weights) and repeatability as the 'adjusted repeatability' -- interpreted as the repeatability of a given hierarchical group after controlling for fixed effects (Nakagawa & Schielzeth, 2010).

```{r, cache=TRUE}
# Derive confidence intervals of effect sizes from parametric bootstrapping
tidy_mod_weight <-
  tidy(mod_weight, conf.int = TRUE, conf.method = "boot", nsim = 1000)

# run rptR to obtain repeatabilities of random effects
rpt_mod_weight <-
  rpt(weight ~ wing + date_deviance + first_date + last_date + year_ +
        (1 | capture_id),
      grname = c("capture_id", "Fixed"),
      data = cap_05_09_std_pca,
      datatype = "Gaussian",
      nboot = 1000, npermut = 1000, ratio = TRUE,
      adjusted = TRUE, ncores = 4, parallel = TRUE)

# run partR2 on each model to obtain marginal R2, parameter estimates, and beta
# weights
R2m_mod_weight <-
  partR2(mod_weight,
         partvars = c("wing",
                      "date_deviance",
                      "first_date",
                      "last_date",
                      "year_"),
         R2_type = "marginal",
         nboot = 1000,
         CI = 0.95,
         max_level = 1)

R2c_mod_weight <-
  partR2(mod_weight,
         partvars = c("wing",
                      "date_deviance",
                      "first_date",
                      "last_date",
                      "year_"),
         R2_type = "conditional",
         nboot = 1000,
         CI = 0.95,
         max_level = 1)

stats_mod_weight <-
  list(mod = mod_weight,
       tidy = tidy_mod_weight,
       rptR = rpt_mod_weight,
       partR2m = R2m_mod_weight,
       partR2c = R2c_mod_weight)
```

First let's plot the residuals against the fitted values

```{r}
# Get the residuals
resid <- residuals(stats_mod_weight$mod)

# Plot the residuals vs fitted values
ggplot(data.frame(resid = resid, fitted = fitted(stats_mod_weight$mod)), aes(x = fitted, y = resid)) +
  geom_point() +
  labs(x = "Fitted Values", y = "Residuals") +
  ggtitle("Residuals vs Fitted Values")

```

Then let's explore the effect sizes and predictions

```{r}
#### Table of effect sizes (van de Pol method) ----
# Retrieve sample sizes
sample_sizes <-
  cap_05_09_std_pca %>% 
  ungroup() %>% 
  summarise(Year = n_distinct(year_),
            Individual = n_distinct(capture_id),
            Observations = nrow(.))

sample_sizes <- 
  as.data.frame(t(as.data.frame(sample_sizes))) %>%
  rownames_to_column("term") %>% 
  rename(estimate = V1) %>% 
  mutate(stat = "n")

# # dataset summary
# cap_05_09_std_pca %>% 
#   ungroup() %>% 
#   summarise(max_weight = max(weight, na.rm = TRUE),
#             min_weight = min(weight, na.rm = TRUE),
#             mean_weight = mean(weight, na.rm = TRUE),
#             sd_weight = sd(weight, na.rm = TRUE)) %>% 
#   t()


# clean model component names
mod_comp_names <- 
  data.frame(comp_name = c("Wing length",
                           "Within ind. temporal change",
                           "Between ind. effect of season (first measure)",
                           "Between ind. effect of season (last measure)",
                           "Year 2006",
                           "Year 2007",
                           "Year 2008",
                           "Year 2009",
                           "Total Marginal \U1D479\U00B2",
                           "Wing length",
                           "Within ind. temporal change",
                           "Between ind. effect of season (first measure)",
                           "Between ind. effect of season (last measure)",
                           "Year",
                           "Total Conditional \U1D479\U00B2",
                           "Individual",
                           "Residual",
                           "Individual",
                           "Residual",
                           "Years",
                           "Individuals",
                           "Observations"))

# Fixed effect sizes (non-standardized)
fixefTable <- 
  stats_mod_weight$tidy %>% 
  dplyr::filter(effect == "fixed") %>% 
  dplyr::select(term, estimate, conf.low, conf.high) %>% 
  as.data.frame() %>% 
  mutate(stat = "fixed")

# Fixed effect sizes (standardized)
fixef_bw_Table <- 
  stats_mod_weight$partR2m$BW %>% 
  as.data.frame() %>% 
  mutate(stat = "fixed_bw") %>% 
  rename(conf.low = CI_lower,
         conf.high = CI_upper)

# Semi-partial R2 estimates
R2Table <- 
  bind_rows(stats_mod_weight$partR2m$R2,
            stats_mod_weight$partR2c$R2[1,]) %>% 
  dplyr::select(term, estimate, CI_lower, CI_upper) %>% 
  as.data.frame() %>% 
  mutate(stat = "partR2") %>% 
  rename(conf.low = CI_lower,
         conf.high = CI_upper)

# Random effects variances
ranefTable <- 
  stats_mod_weight$tidy %>% 
  dplyr::filter(effect == "ran_pars") %>% 
  dplyr::select(group, estimate, conf.low, conf.high) %>% 
  as.data.frame() %>% 
  mutate(stat = "rand") %>% 
  rename(term = group) %>% 
  mutate(estimate = estimate^2,
         conf.high = conf.high^2,
         conf.low = conf.low^2)

# Adjusted repeatabilities
coefRptTable <- 
  stats_mod_weight$rptR$R_boot %>% 
  dplyr::select(-Fixed) %>% 
  mutate(residual = 1 - rowSums(.)) %>% 
  apply(., 2, 
        function(x) c(mean (x), quantile (x, prob = c(0.025, 0.975)))) %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column("term") %>% 
  rename(estimate = V1,
         conf.low = `2.5%`,
         conf.high = `97.5%`) %>% 
  mutate(stat = "RptR")

# Store all parameters into a single table and clean it up
allCoefs_mod <- 
  bind_rows(fixef_bw_Table,
            R2Table,
            ranefTable, 
            coefRptTable, 
            sample_sizes) %>% 
  bind_cols(.,
            mod_comp_names) %>%
  mutate(coefString = ifelse(!is.na(conf.low),
                             paste0("[", 
                                    round(conf.low, 2), ", ", 
                                    round(conf.high, 2), "]"),
                             NA),
         effect = c(rep("Fixed effects \U1D6FD (standardized)", nrow(fixef_bw_Table)),
                    rep("Partitioned \U1D479\U00B2", nrow(R2Table)),
                    rep("Random effects \U1D70E\U00B2", nrow(ranefTable)),
                    rep("Adjusted repeatability \U1D45F", nrow(coefRptTable)),
                    rep("Sample sizes \U1D45B", nrow(sample_sizes)))) %>%
  dplyr::select(effect, everything())

# # re-organize model components for table
# allCoefs_mod <-
#   allCoefs_mod[c(1:4, 8, 6:9, 16, 15, 10:14, 17:28), ]
# 
# allCoefs_mod %>% 
#   round(estimate)

# draw gt table
mod_weight_wing_table <- 
  allCoefs_mod %>% 
  dplyr::select(effect, comp_name, estimate, coefString) %>% 
  gt(rowname_col = "row",
     groupname_col = "effect") %>% 
  cols_label(comp_name = html("<i>male Pectoral Sandpiper body mass dynamics</i>"),
             estimate = "Mean estimate",
             coefString = "95% confidence interval") %>% 
  fmt_number(columns = c(estimate),
             rows = 1:19,
             decimals = 2,
             use_seps = FALSE) %>% 
  fmt_number(columns = c(estimate),
             rows = 20:22,
             decimals = 0,
             use_seps = FALSE) %>% 
  sub_missing(columns = 1:4,
              missing_text = "") %>% 
  cols_align(align = "left",
             columns = c(comp_name)) %>% 
  tab_options(row_group.font.weight = "bold",
              row_group.background.color = brewer.pal(9,"Greys")[3],
              table.font.size = 12,
              data_row.padding = 3,
              row_group.padding = 4,
              summary_row.padding = 2,
              column_labels.font.size = 14,
              row_group.font.size = 12,
              table.width = pct(60))

mod_weight_wing_table
```

```{r}
mod_weight_wing_forest_plot_fixef <-
  allCoefs_mod %>%
  filter(str_detect(effect, "Fixed") & 
           term != "(Intercept)" & str_detect(comp_name, "Year", negate = TRUE)) %>%
  mutate(comp_name = fct_relevel(comp_name,
                                 "Between ind. effect of season (last measure)",
                                 "Between ind. effect of season (first measure)",
                                 "Within ind. temporal change",
                                 "Wing length")) %>%
  ggplot() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey") +
  geom_errorbarh(aes(xmin = conf.low,
                     xmax = conf.high,
                     y = comp_name),
                 alpha = 1, color = col_all, 
                 size = 0.5,
                 height = 0) +
  geom_point(aes(y = comp_name, x = estimate),
             size = 3, shape = 21, 
             fill = "#ECEFF4", col = col_all, 
             alpha = 1, stroke = 0.5) +
  luke_theme +
  theme(axis.title.x = element_text(size = 10, hjust = 0.5),
        plot.title = element_text(face = 'italic', hjust = 0.5)) +
  ylab("Fixed effects") +
  xlab(expression(italic(paste("              Standardized effect size (", beta,")" %+-% "95% CI", sep = "")))) #+
  # ggtitle('male Pectoral Sandpiper body mass dynamics')

# Semi-partial R2 estimates
mod_weight_wing_forest_plot_partR2 <-
  allCoefs_mod %>%
  filter(str_detect(effect, "Partitioned") & str_detect(comp_name, "Conditional", negate = TRUE)) %>%
  mutate(comp_name = fct_relevel(comp_name,
                                 "Year",
                                 "Between ind. effect of season (last measure)",
                                 "Between ind. effect of season (first measure)",
                                 "Within ind. temporal change",
                                 "Wing length",
                                 "Total Marginal \U1D479\U00B2")) %>%
  ggplot() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey") +
  geom_errorbarh(aes(xmin = conf.low,
                     xmax = conf.high,
                     y = comp_name),
                 alpha = 1, color = col_all, 
                 size = 0.5,
                 height = 0) +
  geom_point(aes(y = comp_name, x = estimate),
             size = 3, shape = 21, 
             fill = "#ECEFF4", col = col_all, 
             alpha = 1, stroke = 0.5) +
  luke_theme +
  theme(axis.title.x = element_text(size = 10, hjust = 0.5)) +
  scale_y_discrete(labels = c("Year" = expression("Year"),
                              "Between ind. effect of season (last measure)" = expression("Between ind. effect of season (last measure)"),
                              "Between ind. effect of season (first measure)" = expression("Between ind. effect of season (first measure)"),
                              "Within ind. temporal change" = expression("Within ind. temporal change"),
                              "Wing length" = expression("Wing length"),
                              "Total Marginal \U1D479\U00B2" = expression(paste("Total marginal ", italic("R"), ''^{2}, sep = "")))) +
  ylab(expression(paste("Semi-partial ", italic("R"),''^{2}, sep = ""))) +
  xlab(expression(italic(paste("               Variance explained (R", ''^{2}, ")" %+-% "95% CI", sep = ""))))

# Random effect variances
mod_weight_wing_forest_plot_randef <-
  allCoefs_mod %>%
  filter(str_detect(effect, "Random")) %>%
  mutate(comp_name = fct_relevel(comp_name,
                                 "Residual",
                                 "Individual")) %>%
  ggplot() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey") +
  geom_errorbarh(aes(xmin = conf.low,
                     xmax = conf.high,
                     y = comp_name),
                 alpha = 1, color = col_all, 
                 size = 0.5,
                 height = 0) +
  geom_point(aes(y = comp_name, x = estimate),
             size = 3, shape = 21, 
             fill = "#ECEFF4", col = col_all, 
             alpha = 1, stroke = 0.5) +
  luke_theme +
  theme(axis.title.x = element_text(size = 10, hjust = 0.5)) +
  ylab("Random\neffects") +
  xlab(expression(italic(paste("Variance (", sigma, ''^{2}, ")" %+-% "95% CI", sep = ""))))

# Adjusted repeatabilities
mod_weight_wing_forest_plot_rptR <-
  allCoefs_mod %>%
  filter(str_detect(effect, "repeat")) %>%
  mutate(comp_name = fct_relevel(comp_name,
                                 "Residual",
                                 "Individual")) %>%
  ggplot() +
  geom_vline(xintercept = 0, linetype = "dashed", color = "grey") +
  geom_errorbarh(aes(xmin = conf.low,
                     xmax = conf.high,
                     y = comp_name),
                 alpha = 1, color = col_all, 
                 size = 0.5,
                 height = 0) +
  geom_point(aes(y = comp_name, x = estimate),
             size = 3, shape = 21, 
             fill = "#ECEFF4", col = col_all, 
             alpha = 1, stroke = 0.5) +
  luke_theme +
  theme(axis.title.x = element_text(size = 10, hjust = 0.5)) +
  ylab("Intra-class\ncorrelation") +
  xlab(expression(italic(paste("              Adjusted repeatability (r)" %+-% "95% CI", sep = ""))))

# Patchwork plot
mod_weight_wing_forest_plot_combo <-
  (mod_weight_wing_forest_plot_fixef / mod_weight_wing_forest_plot_partR2 / 
     mod_weight_wing_forest_plot_rptR) + 
  plot_annotation(tag_levels = 'A', title = 'male pectoral sandpiper body mass dynamics', 
                  theme = theme(plot.title = element_text(face = 'italic', hjust = 0.85))) +
  plot_layout(heights = c(6, 6.75, 4.5),
              widths = c(8, 8, 8))

mod_weight_wing_forest_plot_combo
```

Relationship between body mass and wing length
```{r}
# extract fitted values
mod_weight_wing_fits <- 
  as.data.frame(effect(term = "wing", mod = stats_mod_weight$mod, 
                       xlevels = list(wing = seq(min(cap_05_09_std_pca[, "wing"], na.rm = TRUE),
                                                 max(cap_05_09_std_pca[, "wing"], na.rm = TRUE), 0.01))))

wing_weight_plot <-
  ggplot() +
  geom_errorbar(data = cap_05_09_std_pca %>% 
                  group_by(capture_id, wing) %>% 
                  summarise(mean_weight = mean(weight),
                            max_weight = max(weight),
                            min_weight = min(weight)),
                aes(y = mean_weight, x = wing,
                    ymin = min_weight,
                    ymax = max_weight),
                alpha = 0.3, size = 0.5, width = 0, linetype = "solid",
                color = brewer.pal(8, "Set1")[c(2)]) +
  geom_point(data = 
               cap_05_09_std_pca %>% 
               group_by(capture_id, wing) %>% 
               summarise(mean_weight = mean(weight),
                         sd_weight = sd(weight)),
             aes(x = wing, y = mean_weight),
             alpha = 0.4,
             shape = 19, #21, 
             color = brewer.pal(8, "Set1")[c(2)]) +
  geom_line(data = mod_weight_wing_fits, aes(x = wing, y = fit),
            lwd = 0.5) +
  geom_ribbon(data = mod_weight_wing_fits, aes(x = wing, 
                                               ymax = upper, ymin = lower),
              lwd = 1, alpha = 0.25) +
  luke_theme +
  theme(panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm"),
        axis.title.y = element_text(vjust = 5)) +
  scale_y_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  ylab("body mass (g; mean and range)") +
  xlab("wing length (mm)")

wing_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = wing, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = wing, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(wing), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("wing length (mm)") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")

weight_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  summarise(weight = mean(weight, na.rm = TRUE)) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = weight, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = weight, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(weight), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 2) +
  luke_theme +
  theme(axis.title.x = element_text(hjust = 0.1),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("body mass (g)") +
  scale_x_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left") +
  coord_flip()

wing_dist_plot + plot_spacer() + wing_weight_plot + weight_dist_plot + 
  plot_layout(ncol = 2,
              heights = unit(c(2, 8), 'cm'),
              widths = unit(c(8, 2), 'cm'))
```

Within-individual change in body mass over season
```{r}
# extract fitted values
mod_weight_d_dev_fits <- 
  as.data.frame(effect(term = "date_deviance", mod = stats_mod_weight$mod, 
                       xlevels = list(date_deviance = seq(min(cap_05_09_std_pca[, "date_deviance"], na.rm = TRUE),
                                                              max(cap_05_09_std_pca[, "date_deviance"], na.rm = TRUE), 0.01))))

d_dev_weight_plot <-
  ggplot() +
  geom_point(data = cap_05_09_std_pca,
             aes(x = date_deviance, y = weight, group = capture_id),
             alpha = 0.4,
             shape = 19,
             color = brewer.pal(8, "Set1")[c(2)]) +
  geom_line(data = cap_05_09_std_pca,
            aes(x = date_deviance, y = weight, group = capture_id),
            lwd = 0.5,
            alpha = 0.4,
            color = brewer.pal(8, "Set1")[c(2)]) +
  geom_line(data = mod_weight_d_dev_fits,
            aes(x = date_deviance, y = fit),
            lwd = 1,
            color = brewer.pal(8, "Set1")[c(2)]) +
  geom_ribbon(data = mod_weight_d_dev_fits, aes(x = date_deviance, 
                                               ymax = upper, ymin = lower),
              lwd = 1, alpha = 0.25) +
  luke_theme +
  theme(panel.border = element_blank(),
        plot.margin = margin(0, 0, 0.5, 0.5, "cm"),
        axis.title.y = element_text(vjust = 5)) +
  scale_y_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  ylab("body mass (g)") +
  xlab("time since first measure (days)")

d_dev_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(2) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = date_deviance, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = date_deviance, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(date_deviance), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("wing length (mm)") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left") +
  annotate(geom = "text", y = 9, x = 20,
           label = "second measures",
           color = "black", size = 3, fontface = 'italic', hjust = 1)

weight_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  summarise(weight = mean(weight, na.rm = TRUE)) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = weight, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = weight, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(weight), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 2) +
  luke_theme +
  theme(axis.title.x = element_text(hjust = 0.1),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("body mass (g)") +
  scale_x_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left") +
  coord_flip()

d_dev_dist_plot + plot_spacer() + d_dev_weight_plot + weight_dist_plot + 
  plot_layout(ncol = 2,
              heights = unit(c(2, 8), 'cm'),
              widths = unit(c(8, 2), 'cm'))
```

Between-individual effect of first date (i.e., selective appearance)

```{r}
# extract fitted values
mod_weight_first_d_fits <- 
  as.data.frame(effect(term = "first_date", mod = stats_mod_weight$mod, 
                       xlevels = list(first_date = seq(min(cap_05_09_std_pca[, "first_date"], na.rm = TRUE),
                                                          max(cap_05_09_std_pca[, "first_date"], na.rm = TRUE), 0.01))))

first_d_weight_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() +
  geom_point(aes(x = first_date, y = weight),
             alpha = 0.4,
             shape = 19,
             color = brewer.pal(8, "Set1")[c(2)]) +
  geom_line(data = mod_weight_first_d_fits,
            aes(x = first_date, y = fit),
            lwd = 1,
            color = brewer.pal(8, "Set1")[c(2)]) +
  geom_ribbon(data = mod_weight_first_d_fits, aes(x = first_date, 
                                                  ymax = upper, ymin = lower),
              lwd = 1, alpha = 0.25) +
  luke_theme +
  theme(panel.border = element_blank(),
        plot.margin = margin(0, 0, 0.5, 0.5, "cm"),
        axis.title.y = element_text(vjust = 5)) +
  scale_y_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  ylab("body mass (g)") +
  xlab("standardized date of first measure")

first_d_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = first_date, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = first_date, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(first_date), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("standardized date of first measure") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")

weight_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = weight, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = weight, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(weight), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 2) +
  luke_theme +
  theme(axis.title.x = element_text(hjust = 0.1),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("body mass (g)") +
  scale_x_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left") +
  coord_flip()

first_d_dist_plot + plot_spacer() + first_d_weight_plot + weight_dist_plot + 
  plot_layout(ncol = 2,
              heights = unit(c(2, 8), 'cm'),
              widths = unit(c(8, 2), 'cm'))
```

Between-individual effect of last date (i.e., selective disappearance)

```{r}
# extract fitted values of chick weight v egg volume model
mod_weight_last_d_fits <- 
  as.data.frame(effect(term = "last_date", mod = stats_mod_weight$mod, 
                       xlevels = list(last_date = seq(min(cap_05_09_std_pca[, "last_date"], na.rm = TRUE),
                                                      max(cap_05_09_std_pca[, "last_date"], na.rm = TRUE), 0.01))))

last_d_weight_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(n()) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() +
  geom_point(aes(x = last_date, y = weight),
             alpha = 0.4,
             shape = 19,
             color = brewer.pal(8, "Set1")[c(2)]) +
  geom_line(data = mod_weight_last_d_fits,
            aes(x = last_date, y = fit),
            lwd = 1,
            color = brewer.pal(8, "Set1")[c(2)]) +
  geom_ribbon(data = mod_weight_last_d_fits, aes(x = last_date, 
                                                    ymax = upper, ymin = lower),
              lwd = 1, alpha = 0.25) +
  luke_theme +
  theme(panel.border = element_blank(),
        plot.margin = margin(0, 0, 0.5, 0.5, "cm"),
        axis.title.y = element_text(vjust = 5)) +
  scale_y_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  ylab("body mass (g)") +
  xlab("standardized date of last measure")

last_d_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(n()) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = last_date, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = last_date, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(last_date), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 1) +
  luke_theme +
  theme(axis.title.y = element_text(hjust = 0.1),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("standardized date of last measure") +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left")

weight_dist_plot <-
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(n()) %>% 
  ungroup() %>% 
  na.omit() %>% 
  ggplot() + 
  geom_boxplot(aes(x = weight, y = 16), 
               fill = brewer.pal(8, "Set1")[c(2)], 
               color = brewer.pal(8, "Set1")[c(2)],
               width = 1, alpha = 0.5) +
  geom_jitter(aes(x = weight, y = 13), 
              fill = brewer.pal(8, "Set1")[c(2)], 
              color = brewer.pal(8, "Set1")[c(2)],
              height = 0.5, alpha = 0.5) +
  geom_histogram(alpha = 0.5, aes(weight), 
                 fill = brewer.pal(8, "Set1")[c(2)], 
                 binwidth = 2) +
  luke_theme +
  theme(axis.title.x = element_text(hjust = 0.1),
        axis.title.y = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank(),
        panel.border = element_blank(),
        plot.margin = margin(0, 0, 0, 0.5, "cm")) +
  ylab(expression(italic(N)[males])) +
  xlab("body mass (g)") +
  scale_x_continuous(limits = c(min(cap_05_09_std_pca$weight, na.rm = TRUE), 
                                max(cap_05_09_std_pca$weight, na.rm = TRUE) * 1.05)) +
  scale_y_continuous(limits = c(0, 17),
                     breaks = c(0, 5, 10), position = "left") +
  coord_flip()

last_d_dist_plot + plot_spacer() + last_d_weight_plot + weight_dist_plot + 
  plot_layout(ncol = 2,
              heights = unit(c(2, 8), 'cm'),
              widths = unit(c(8, 2), 'cm'))
```

## Linking body mass dynamics to paternity

The next step is to link the body mass dynamics to fitness traits of interest, specifically the number of female mates acquired and the the number of young sired.

```{r}
# explore annual variation in polygyny data
pat %>% 
  ggplot()+
  geom_histogram(aes(N_females)) +
  facet_grid(year_ ~ .) +
  ylab(expression(italic(N)[males])) +
  xlab(expression(italic(N)[female~mates]))

# explore annual variation in paternity data
pat %>%
  ggplot()+
  geom_histogram(aes(N_young)) +
  facet_grid(year_ ~ .) +
  ylab(expression(italic(N)[males])) +
  xlab(expression(italic(N)[offspring~sired]))
```

Next we will attempt to model how body mass and size are related to polygyny and paternity. To do so, need to decouple the body mass measures from structural size by calculating an index that adjusts the mass of all individuals to a value they would have if they all had the same body size (i.e., to directly compare the relative mass dynamics among males). Several indicies have been proposed in the literature, such as simple ratios between body mass ($M$) and body size ($L$) measures (e.g., $M/L$, ${M/L}^2$ ("$BMI$"; Quételet's index), or ${M/L}^3$ ("$L$"; Fulton's index)) which are popular in the health sciences, the Residual index ($R_i$) which uses the residuals from an OLS regression of M against one or more length measurements, usually after log transformation, or the scaled mass index ($\hat{M}_i$), which standardizes body mass at a fixed value of a linear body measurement based on the scaling relationship between mass and length:

$$
\hat{M_i} = M_i[ \,\frac{L_0}{L_i}] \,^{\beta_{SMA}}
$$

where $M_i$ and $L_i$ are the body mass and linear body measurement of individual $i$ respectively; $\beta_{SMA}$ is the scaling exponent estimated by the standardized major axis (SMA) regression of $lnM$ on $lnL$; $L_0$ is an arbitrary value of $L$ (e.g. the arithmetic mean value for the study population); and $\hat{M}_i$ is the predicted body mass for individual $i$ when the linear body measure is standardized to $L_0$.

Here we calculate the different indicies proposed in the literature and assess the best one to use for our study on PESAs. Based on the PCA above, we concluded that the wing measurement was the most parsimonious structural variable associated with body mass, so the best index will be reflected in its lack of correlation with wing (i.e., to decouple body mass from structural size). 

First we extract all the first measures of males across the dataset. The raw correlation of wing and body mass is $r^2$ = 0.42.

```{r}
SMA_data_prep <- 
  cap_05_09_std_pca %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>%
  select(capture_id, year_, gpsdt, weight, wing, log_weight, log_wing)

cor.test(SMA_data_prep$log_weight, SMA_data_prep$log_wing)
```

then we calculate the various indices proposed in the literature:
```{r}
# scaled mass index constants
weight_wing_sma_slope <- coef(sma(SMA_data_prep$log_weight ~ SMA_data_prep$log_wing))[2]
avg_wing <- mean(SMA_data_prep$wing)

# residual index preparation
mod <- lmer(weight ~ wing + (1 | capture_id), data = cap_05_09_std_pca)

ggplot(data.frame(resid = residuals(mod), fitted = fitted(mod)), aes(x = fitted, y = resid)) +
  geom_point() +
  labs(x = "Fitted Values", y = "Residuals") +
  ggtitle("Residuals vs Fitted Values")

summary(glht(mod))
plot(allEffects(mod))

# check that the row number is the same (for sanity!)
nrow(cap_05_09_std_pca_smi)
length(residuals(mod))

# make a dataframe of the residuals and the unique capture events
res_df <- 
  data.frame(capture_id = cap_05_09_std_pca$capture_id, 
             gpsdt = cap_05_09_std_pca$gpsdt,
             mod_res = residuals(mod))

# calculate the different indices 
cap_05_09_std_pca_smi <-
  cap_05_09_std_pca %>% 
  ungroup() %>% 
  mutate(smi = weight * (avg_wing/wing)^weight_wing_sma_slope,
         M_L = weight/wing,
         bmi = weight/wing^2,
         L = weight/wing^3) %>% 
  left_join(., res_df, by = c("capture_id", "gpsdt"), multiple = "all") %>%
  distinct()

# evaluate the correlations between the different indices and wing
cap_05_09_std_pca_smi %>% 
  group_by(capture_id) %>% 
  arrange(capture_id, gpsdt) %>% 
  slice(1) %>% 
  ungroup() %>% 
  na.omit() %>% 
  dplyr::select(weight, culmen, totalHead, tarsus,  wing, structure_pc1, smi, bmi, L, mod_res) %>% 
  cor() %>% 
  corrplot(type = "upper", method = "circle", tl.srt = 45, addCoef.col = 'black')

cor.test(cap_05_09_std_pca_smi$weight, cap_05_09_std_pca_smi$wing)
cor.test(cap_05_09_std_pca_smi$smi, cap_05_09_std_pca_smi$wing)
cor.test(cap_05_09_std_pca_smi$bmi, cap_05_09_std_pca_smi$wing)
cor.test(cap_05_09_std_pca_smi$L, cap_05_09_std_pca_smi$wing)
cor.test(cap_05_09_std_pca_smi$mod_res, cap_05_09_std_pca_smi$wing)
```

Next we need to transform our repeated measures of the body index to a rate of change (e.g., $\Delta index^{-t}$), which is essentially calculating the difference between the first and last measure and dividing it by the time difference between the two measures. We will also need to bind the paternity data to the dataframe. We are left with a single row per male that allows for models assessing how the change in body condition is associated with polygyny and paternity.

-   do heavier males acquire more offspring/females?
-   do earlier arriving males acquire more offspring/females?
-   is body mass change linked to paternity or females acquired?

```{r}
cap_05_09_std_pca_pat_delta <- 
  pat %>%
  mutate(capture_id = paste(IDfather, year_, sep = "_")) %>% 
  select(-c(IDfather, year_)) %>% 
  left_join(cap_05_09_std_pca_smi, ., by = "capture_id", multiple = "all") %>%
  # left_join(cap_05_09_std_pca, ., by = "capture_id", multiple = "all") %>% 
  na.omit() %>% 
  group_by(capture_id) %>% 
  slice(1, n()) %>% 
  mutate(delta_weight = weight - lag(weight),
         delta_bmi = bmi - lag(bmi),
         delta_M_L = M_L - lag(M_L),
         delta_L = L - lag(L),
         delta_mod_res = mod_res - lag(mod_res)) %>% 
  mutate(mass_rate = delta_weight/date_deviance,
         BMI_rate = delta_bmi/date_deviance,
         M_L_rate = delta_M_L/date_deviance,
         L_rate = delta_L/date_deviance,
         mod_res_rate = delta_mod_res - lag(mod_res)) %>% 
  # select(-c(gpsdt, n_by_id, culmen, totalHead, tarsus, structure_pc1, log_weight, log_wing)) %>% 
  na.omit()

cor.test(cap_05_09_std_pca_pat_delta$delta_weight, cap_05_09_std_pca_pat_delta$delta_mod_res)
plot(cap_05_09_std_pca_pat_delta$delta_weight, cap_05_09_std_pca_pat_delta$delta_mod_res)
cor.test(cap_05_09_std_pca_pat_delta$mass_rate, cap_05_09_std_pca_pat_delta$mod_res_rate)
plot(cap_05_09_std_pca_pat_delta$mass_rate, cap_05_09_std_pca_pat_delta$mod_res_rate)
plot(cap_05_09_std_pca_pat_delta$date_deviance, cap_05_09_std_pca_pat_delta$mass_rate)
plot(cap_05_09_std_pca_pat_delta$date_deviance, cap_05_09_std_pca_pat_delta$mod_res_rate)

hist(cap_05_09_std_pca_pat_delta$BMI_change)
```

## Mixed effects model of mating dynamics

Do fatter males arrive earlier? No
```{r}
mod_arrival_bmi <- 
  lmer(first_date ~ BMI + (1 | year_),
        data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_arrival_bmi))
plot(allEffects(mod_arrival_bmi))

mod_arrival_res <- 
  lmer(first_date ~ mod_res + (1 | year_),
        data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_arrival_res))
plot(allEffects(mod_arrival_res))
```

Do males with longer wings arrive earlier? No
```{r}
mod_arrival_wing <- 
  lmer(first_date ~ wing + (1 | year_),
        data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_arrival_wing))
plot(allEffects(mod_arrival_wing))
```

Do heavier males arrive earlier? No
```{r}
mod_arrival_weight <- 
  lmer(first_date ~ weight + (1 | year_),
        data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_arrival_weight))
plot(allEffects(mod_arrival_weight))
```

Is the change in condition over season associated with arrival date? No
```{r}
mod_delta_BMI_arrival <-
  lmer(BMI_rate ~ first_date + (1 | year_),
       data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_delta_BMI_arrival))
plot(allEffects(mod_delta_BMI_arrival))

mod_delta_res_arrival <-
  lmer(mod_res_rate ~ first_date + (1 | year_),
       data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_delta_BMI_arrival))
plot(allEffects(mod_delta_BMI_arrival))
```

Is the change in condition over season associated with departure date? No
```{r}
mod_delta_BMI_departure <-
  lmer(BMI_rate ~ last_date + (1 | year_),
       data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_delta_BMI_departure))
plot(allEffects(mod_delta_BMI_departure))

mod_delta_res_departure <-
  lmer(mod_res_rate ~ last_date + (1 | year_),
       data = cap_05_09_std_pca_pat_delta)

summary(glht(mod_delta_res_departure))
plot(allEffects(mod_delta_res_departure))
```

Do earlier males have more mates? No
```{r}
mod_n_females_arrival <-
  glmer(N_females ~ first_date + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_females_arrival))
plot(allEffects(mod_n_females_arrival))
```

Does departure date relate to the number of mates aquired? No
```{r}
mod_n_females_departure <-
  glmer(N_females ~ last_date + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_females_departure))
plot(allEffects(mod_n_females_departure))
```

Do earlier males sire more young? No
```{r}
mod_n_young_arrival <-
  glmer(N_young ~ first_date + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_young_arrival))
plot(allEffects(mod_n_young_arrival))
```

Does departure date relate to the number of young sired? No
```{r}
mod_n_young_departure <-
  glmer(N_young ~ last_date + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_young_departure))
plot(allEffects(mod_n_young_departure))
```

Is the change in body condition associated with polygyny? No
```{r}
mod_n_females_bmi_change <-
  glmer(N_females ~ BMI_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_females_bmi_change))
plot(allEffects(mod_n_females_bmi_change))

mod_n_females_res_change <-
  glmer(N_females ~ mod_res_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

summary(glht(mod_n_females_res_change))
plot(allEffects(mod_n_females_res_change))
```

Is the change in body condition associated with paternity? Yes
strong relationship (p = 0.00333): males with a positive change in BMI sire more young
```{r}
mod_n_young_bmi_change <-
  glmer(N_young ~ BMI_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_bmi_change, intercept = TRUE)
ggeffect(mod_n_young_bmi_change) %>% plot()

mod_n_young_mass_change <-
  glmer(N_young ~ mass_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_mass_change, intercept = TRUE)
ggeffect(mod_n_young_mass_change) %>% plot()

mod_n_young_ML_change <-
  glmer(N_young ~ M_L_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_ML_change, intercept = TRUE)
ggeffect(mod_n_young_ML_change) %>% plot()

mod_n_young_L_change <-
  glmer(N_young ~ L_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_L_change, intercept = TRUE)
ggeffect(mod_n_young_L_change) %>% plot()

mod_n_young_res_change <-
  glmer(N_young ~ mod_res_rate + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_res_change, intercept = TRUE)
ggeffect(mod_n_young_res_change) %>% plot()
```

Is body size associated with polygyny? No
```{r}
mod_n_females_wing <-
  glmer(N_females ~ wing + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_females_wing, intercept = TRUE)
ggeffect(mod_n_females_wing) %>% plot()

mod_n_females_PC1 <-
  glmer(N_females ~ structure_pc1 + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_females_PC1, intercept = TRUE)
ggeffect(mod_n_females_PC1) %>% plot()

mod_n_females_tarsus <-
  glmer(N_females ~ tarsus + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_females_tarsus, intercept = TRUE)
ggeffect(mod_n_females_tarsus) %>% plot()
```

Is body size associated with paternity? Maybe
weak relationship (p = 0.06): larger-sized males tend to sire more offspring
```{r}
mod_n_young_wing <-
  glmer(N_young ~ wing + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_wing, intercept = TRUE)
ggeffect(mod_n_young_wing) %>% plot()

mod_n_young_PC1 <-
  glmer(N_young ~ structure_pc1 + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_PC1, intercept = TRUE)
ggeffect(mod_n_young_PC1) %>% plot()

mod_n_young_tarsus <-
  glmer(N_young ~ tarsus + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)

tbl_regression(mod_n_young_tarsus, intercept = TRUE)
ggeffect(mod_n_young_tarsus) %>% plot()
```

Is body weight associated with polygyny?
```{r}
mod_n_females_weight <-
  glmer(N_females ~ weight + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)
tbl_regression(mod_n_females_weight, intercept = TRUE)
ggeffect(mod_n_females_weight) %>% plot()
```

Is body weight associated with paternity? Yes
strong relationship between initial weight and the number of young sired (p < 0.001)
also, a strong relationship between residual index and paternity (p < 0.001)
```{r}
mod_n_young_weight <-
  glmer(N_young ~ weight + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)
tbl_regression(mod_n_young_weight, intercept = TRUE)
ggeffect(mod_n_young_weight) %>% plot()

mod_n_young_res <-
  glmer(N_young ~ mod_res + (1 | year_),
        data = cap_05_09_std_pca_pat_delta, family = poisson)
tbl_regression(mod_n_young_res, intercept = TRUE)
ggeffect(mod_n_young_res) %>% plot()
```

## EDA on body mass
```{r}
# ggplot(cap, aes(y = weight, x = factor(year_)) ) + 
# geom_boxplot()
# 
# ggplot(cap, aes(y = weight, x = capture_id, group = ID) ) + 
# facet_wrap(~year_) + 
# geom_smooth(method = lm, se = FALSE)
# 
# 
# ggplot(wcap, aes(delta_weight)) +
#   geom_histogram()
# 
# ggplot(wcap, aes(y = delta_weight, x = delta_time) ) +
#   geom_point() + 
#   geom_smooth()


```

## Paternity

### Paternity and body mass

Subset of males that sired at least one young

```{r}
# x = merge(cap, pat, by = c("ID", "year_"))
# 
# ggplot(x, aes(y = N_females, x = weight)) +
#   geom_point() 
# 
# glmmTMB(N_females ~ weight + (1|year_), family = poisson, x) |>
# tbl_regression(intercept = TRUE)
# 
# 
# ggplot(x, aes(y = N_young, x = weight)) +
#   geom_point() 
# 
# glmmTMB(N_young ~ weight + (1|year_), family = poisson, x) |>
# tbl_regression(intercept = TRUE)

```

### Paternity and body mass

All males

```{r}
#using first capture
# x = merge(cap, pat, by = c("ID", "year_"), all.x = TRUE)
# x[is.na(N_females), N_females := 0]
# x[is.na(N_young), N_young := 0]
# 
# 
# ggplot(x, aes(y = N_females, x = weight)) +
#   geom_point() 
# 
# glmmTMB(N_females ~ weight + (1|year_), zi=~weight, family = poisson, x) |>
# tbl_regression(intercept = TRUE)
# 
# 
# ggplot(x, aes(y = N_young, x = weight)) +
#   geom_point() 
# 
# glmmTMB(N_young ~ weight + (1|year_), zi=~weight, family = poisson, x) |>
# tbl_regression(intercept = TRUE)

```

### Paternity and tenure

```{r}
# x <- merge(cap, pat, by = c("ID", "year_"), all.x = TRUE)
# x[is.na(N_females), N_females := 0]
# x[is.na(N_young), N_young := 0]
# 
# x = merge(x, ten, by= c('ID', "year_"))
# 
# 
# fm = glmmTMB(N_females ~ tenureDays + (1|year_), family = poisson, x)
# 
# tbl_regression(fm , intercept = TRUE)
# 
# ggeffect(fm) |> plot()
# 
# 
# fm = glmmTMB(N_young ~ tenureDays + (1|year_), family = poisson, x)
# tbl_regression(fm, intercept = TRUE)
# 
# ggeffect(fm) |> plot()


```

### Paternity, tenure and body mass

```{r}
# x <- merge(cap, pat, by = c("ID", "year_"), all.x = TRUE)
# x[is.na(N_females), N_females := 0]
# x[is.na(N_young), N_young := 0]
# 
# x = merge(x, ten, by= c('ID', "year_"))
# 
# 
# fm = glmmTMB(N_females ~ weight + tenureDays + (1|year_), family = poisson, x)
# 
# tbl_regression(fm , intercept = TRUE)
# 
# g1 = ggeffect(fm, "weight") |> plot()
# g2 = ggeffect(fm, "tenureDays") |> plot()
# 
# g1 + g2
# 
# 
# fm = glmmTMB(N_young ~ weight + tenureDays + (1 | year_), family = poisson, x)
# tbl_regression(fm, intercept = TRUE)
# 
# g1 <- ggeffect(fm, "weight") |> plot()
# g2 <- ggeffect(fm, "tenureDays") |> plot()
# 
# g1 + g2


```

### Paternity and body mass change

```{r}
# x = merge(wcap, pat, by = c("ID", "year_"))
# x = merge(x, ten, by = c("ID", "year_"))
# 
# ggplot(x, aes(y = N_young, x = delta_weight)) +
#   geom_point() +
#   geom_smooth(method = lm)
# 
# glm(N_young ~ weight_1 + delta_weight, poisson, x) |>
# tbl_regression(intercept = TRUE)
# 
# glm(N_young ~ tenureDays + weight_1 + delta_weight, poisson, x) |>
# tbl_regression(intercept = TRUE)






```
